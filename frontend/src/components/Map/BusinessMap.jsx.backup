import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { LoadScript } from '@react-google-maps/api';
import GoogleMap from './GoogleMap';
import { businessAPI } from '../../services/api';
import { useAuth } from '../../contexts/AuthContext';
import './BusinessMap.css';

const libraries = ['places'];
const GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;

const BusinessMap = () => {
  const [businesses, setBusinesses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showStats, setShowStats] = useState(true);
  const [isControlsCollapsed, setIsControlsCollapsed] = useState(false);
  const [businessTypes, setBusinessTypes] = useState([]);
  const [selectedType, setSelectedType] = useState('all');
  const [mapsLoaded, setMapsLoaded] = useState(false);
  const [mapsError, setMapsError] = useState(false);
  const [loadingTimeout, setLoadingTimeout] = useState(false);
  
  const navigate = useNavigate();
  const { user, isAdmin } = useAuth();

  // Timeout para evitar carga infinita
  useEffect(() => {
    const timeout = setTimeout(() => {
      if (!mapsLoaded) {
        console.warn('⏰ Google Maps loading timeout');
        setLoadingTimeout(true);
        setLoading(false);
      }
    }, 15000); // 15 segundos timeout

    return () => clearTimeout(timeout);
  }, [mapsLoaded]);

  // Cargar datos de negocios
  useEffect(() => {
    loadBusinesses();
    loadBusinessTypes();
  }, [selectedType]);

  const loadBusinesses = async () => {
    try {
      console.log('📍 Cargando negocios para el mapa...');
      
      const params = {};
      if (selectedType !== 'all') {
        params.type = selectedType;
      }

      const response = await businessAPI.getAll(params);
      
      if (response.success) {
        const businessesWithCoords = response.data.filter(
          business => business.latitude && business.longitude
        );
        
        setBusinesses(businessesWithCoords);
        console.log(`📍 ${businessesWithCoords.length} negocios con coordenadas cargados`);
      } else {
        throw new Error(response.message || 'Error cargando negocios');
      }
    } catch (error) {
      console.error('❌ Error cargando negocios:', error);
      setError('Error cargando negocios: ' + error.message);
    }
  };

  const loadBusinessTypes = async () => {
    try {
      const response = await businessAPI.getTypes();
      if (response.success) {
        setBusinessTypes(response.data);
      }
    } catch (error) {
      console.error('❌ Error cargando tipos de negocio:', error);
    }
  };

  const handleMapLoad = useCallback(() => {
    console.log('✅ Google Maps cargado exitosamente');
    setMapsLoaded(true);
    setLoading(false);
    setMapsError(false);
  }, []);

  const handleMapError = useCallback((error) => {
    console.error('❌ Error cargando Google Maps:', error);
    setMapsError(true);
    setLoading(false);
  }, []);

  // Si no hay API key, mostrar mensaje
  if (!GOOGLE_MAPS_API_KEY) {
    return (
      <div className="map-container">
        <div className="map-error">
          <h2>🗺️ Configuración de Mapas</h2>
          <p>Google Maps API Key no configurada</p>
          <div className="business-list-fallback">
            <h3>Negocios disponibles:</h3>
            {businesses.map(business => (
              <div key={business.id} className="business-item">
                <h4>{business.name}</h4>
                <p>{business.address}</p>
                <p>{business.business_type}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  // Si hay timeout o error, mostrar alternativa
  if (loadingTimeout || mapsError) {
    return (
      <div className="map-container">
        <div className="map-error">
          <h2>🗺️ Problema con Google Maps</h2>
          <p>
            {loadingTimeout 
              ? 'Google Maps tardó demasiado en cargar' 
              : 'Error cargando Google Maps'
            }
          </p>
          
          <div className="map-alternatives">
            <button 
              onClick={() => window.location.reload()} 
              className="btn btn-primary"
            >
              🔄 Reintentar
            </button>
            
            <button 
              onClick={() => navigate('/dashboard')} 
              className="btn btn-secondary"
            >
              📊 Ir al Dashboard
            </button>
          </div>

          {/* Lista de negocios como fallback */}
          <div className="business-list-fallback">
            <h3>Negocios con ubicación ({businesses.length}):</h3>
            <div className="businesses-grid">
              {businesses.map(business => (
                <div key={business.id} className="business-card-mini">
                  <h4>{business.name}</h4>
                  <p><strong>Tipo:</strong> {business.business_type}</p>
                  <p><strong>Dirección:</strong> {business.address}</p>
                  {business.phone && (
                    <p><strong>Teléfono:</strong> {business.phone}</p>
                  )}
                  
                  <div className="business-actions">
                    <button
                      onClick={() => {
                        const url = `https://www.google.com/maps?q=${business.latitude},${business.longitude}`;
                        window.open(url, '_blank');
                      }}
                      className="btn btn-sm btn-outline"
                    >
                      🗺️ Ver en Google Maps
                    </button>
                    
                    {(isAdmin() || business.created_by === user?.id) && (
                      <button
                        onClick={() => navigate(`/business/edit/${business.id}`)}
                        className="btn btn-sm btn-primary"
                      >
                        ✏️ Editar
                      </button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Loading state
  if (loading) {
    return (
      <div className="map-container">
        <div className="map-loading">
          <div className="loading-spinner"></div>
          <h2>🗺️ Cargando Google Maps...</h2>
          <p>Esto puede tardar unos segundos</p>
          
          {/* Botón de escape después de 5 segundos */}
          <div className="loading-escape">
            <button 
              onClick={() => {
                console.log('Usuario canceló la carga del mapa');
                setLoadingTimeout(true);
              }}
              className="btn btn-outline"
            >
              ⏭️ Continuar sin mapa
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="map-container">
        <div className="map-error">
          <h2>❌ Error</h2>
          <p>{error}</p>
          <button onClick={loadBusinesses} className="btn btn-primary">
            🔄 Reintentar
          </button>
        </div>
      </div>
    );
  }

  // Render normal con Google Maps
  return (
    <div className="map-container">
      <LoadScript
        googleMapsApiKey={GOOGLE_MAPS_API_KEY}
        libraries={libraries}
        onLoad={handleMapLoad}
        onError={handleMapError}
        loadingElement={
          <div className="map-loading">
            <div className="loading-spinner"></div>
            <p>Inicializando Google Maps...</p>
          </div>
        }
      >
        {/* Controles del mapa */}
        <div className={`map-controls ${isControlsCollapsed ? 'collapsed' : ''}`}>
          <div className="controls-header">
            <h3>🗺️ Mapa de Negocios</h3>
            <button
              onClick={() => setIsControlsCollapsed(!isControlsCollapsed)}
              className="collapse-btn"
            >
              {isControlsCollapsed ? '📋' : '📋'}
            </button>
          </div>

          {!isControlsCollapsed && (
            <div className="controls-content">
              {/* Filtros */}
              <div className="filter-section">
                <label htmlFor="typeFilter">Filtrar por tipo:</label>
                <select
                  id="typeFilter"
                  value={selectedType}
                  onChange={(e) => setSelectedType(e.target.value)}
                  className="filter-select"
                >
                  <option value="all">Todos los tipos</option>
                  {businessTypes.map((type) => (
                    <option key={type} value={type}>
                      {type}
                    </option>
                  ))}
                </select>
              </div>

              {/* Estadísticas */}
              {showStats && (
                <div className="stats-section">
                  <div className="stat-item">
                    <span className="stat-number">{businesses.length}</span>
                    <span className="stat-label">Negocios en mapa</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-number">{businessTypes.length}</span>
                    <span className="stat-label">Tipos disponibles</span>
                  </div>
                </div>
              )}

              {/* Acciones */}
              <div className="actions-section">
                <button
                  onClick={() => navigate('/business/new')}
                  className="btn btn-primary"
                >
                  ➕ Agregar Negocio
                </button>
                
                <button
                  onClick={() => navigate('/dashboard')}
                  className="btn btn-secondary"
                >
                  📊 Dashboard
                </button>
              </div>
            </div>
          )}
        </div>

        {/* El mapa real */}
        <GoogleMap 
          businesses={businesses}
          onBusinessClick={(business) => {
            console.log('Negocio seleccionado:', business.name);
          }}
        />
      </LoadScript>
    </div>
  );
};

export default BusinessMap;