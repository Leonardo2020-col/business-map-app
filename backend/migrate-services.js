// migrate-services.js
// Script para ejecutar la migraci√≥n de servicios
// Ejecutar con: node migrate-services.js

const sequelize = require('./src/config/database');
const Business = require('./src/models/Business');

async function runMigration() {
  try {
    console.log('üöÄ Iniciando migraci√≥n de servicios...');
    
    // Verificar conexi√≥n
    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n a la base de datos verificada');
    
    // Ejecutar la migraci√≥n usando Sequelize
    console.log('üìã Sincronizando modelo Business...');
    
    // Usar sync con alter: true para agregar las nuevas columnas
    await Business.sync({ alter: true });
    
    console.log('‚úÖ Migraci√≥n completada exitosamente');
    
    // Verificar que las columnas se agregaron
    console.log('üîç Verificando columnas agregadas...');
    
    const [results] = await sequelize.query(`
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'businesses' 
        AND column_name IN (
          'defensa_civil_expiry',
          'extintores_expiry', 
          'fumigacion_expiry',
          'pozo_tierra_expiry',
          'publicidad_expiry'
        )
      ORDER BY column_name;
    `);
    
    if (results.length === 5) {
      console.log('‚úÖ Todas las columnas de servicios se agregaron correctamente:');
      results.forEach(col => {
        console.log(`   - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);
      });
    } else {
      console.log('‚ö†Ô∏è  Solo se agregaron', results.length, 'de 5 columnas esperadas');
      results.forEach(col => {
        console.log(`   - ${col.column_name}: ${col.data_type}`);
      });
    }
    
    // Verificar √≠ndices
    console.log('üîç Verificando √≠ndices...');
    const [indexes] = await sequelize.query(`
      SELECT indexname
      FROM pg_indexes 
      WHERE tablename = 'businesses' 
        AND indexname LIKE '%expiry%'
      ORDER BY indexname;
    `);
    
    console.log(`‚úÖ Se crearon ${indexes.length} √≠ndices para servicios:`, indexes.map(i => i.indexname));
    
    // Probar los nuevos m√©todos del modelo
    console.log('üß™ Probando nuevos m√©todos del modelo...');
    
    const totalBusinesses = await Business.count();
    console.log(`üìä Total de negocios: ${totalBusinesses}`);
    
    if (totalBusinesses > 0) {
      // Probar m√©todos est√°ticos
      const businessesWithIssues = await Business.getWithServiceIssues();
      console.log(`üìä Negocios con problemas en servicios: ${businessesWithIssues.length}`);
      
      const expiredServices = await Business.getExpiredServices();
      console.log(`üìä Negocios con servicios vencidos: ${expiredServices.length}`);
      
      const expiringSoon = await Business.getServicesExpiringSoon(30);
      console.log(`üìä Negocios con servicios que vencen en 30 d√≠as: ${expiringSoon.length}`);
      
      // Probar m√©todo de instancia en el primer negocio
      const firstBusiness = await Business.findOne();
      if (firstBusiness) {
        const servicesStatus = firstBusiness.getServicesStatus();
        console.log(`üìä Estado de servicios del negocio "${firstBusiness.name}":`, 
          servicesStatus.map(s => `${s.name}: ${s.status}`).join(', '));
      }
    }
    
    console.log('üéâ Migraci√≥n completada exitosamente');
    console.log('üí° Ahora puedes usar los nuevos campos de servicios en tu frontend');
    
  } catch (error) {
    console.error('‚ùå Error durante la migraci√≥n:', error);
    
    if (error.name === 'SequelizeConnectionError') {
      console.error('üí° Verifica tu configuraci√≥n de base de datos en .env');
    } else if (error.message.includes('column') && error.message.includes('already exists')) {
      console.log('‚úÖ Las columnas ya existen, migraci√≥n no necesaria');
    } else {
      console.error('üí° Revisa los logs anteriores para m√°s detalles');
    }
  } finally {
    await sequelize.close();
    console.log('üì¥ Conexi√≥n cerrada');
  }
}

// Funci√≥n para mostrar ayuda
function showHelp() {
  console.log(`
üîß Script de Migraci√≥n de Servicios

Este script agrega los campos de servicios y fechas de vencimiento al modelo Business.

Uso:
  node migrate-services.js [opciones]

Opciones:
  --help, -h    Mostrar esta ayuda
  --dry-run     Mostrar qu√© cambios se har√≠an sin ejecutarlos
  --force       Forzar la migraci√≥n aunque las columnas ya existan

Campos que se agregan:
  - defensa_civil_expiry: Fecha de vencimiento de Defensa Civil
  - extintores_expiry: Fecha de vencimiento de Extintores  
  - fumigacion_expiry: Fecha de vencimiento de Fumigaci√≥n
  - pozo_tierra_expiry: Fecha de vencimiento de Pozo a Tierra
  - publicidad_expiry: Fecha de vencimiento de Publicidad

Ejemplos:
  node migrate-services.js
  node migrate-services.js --dry-run
  node migrate-services.js --force
`);
}

// Manejar argumentos de l√≠nea de comandos
const args = process.argv.slice(2);

if (args.includes('--help') || args.includes('-h')) {
  showHelp();
  process.exit(0);
}

if (args.includes('--dry-run')) {
  console.log('üîç MODO DRY-RUN: Mostrando cambios que se har√≠an...');
  console.log(`
üìã Cambios que se ejecutar√≠an:

1. Agregar columnas a la tabla 'businesses':
   - defensa_civil_expiry (DATE, nullable)
   - extintores_expiry (DATE, nullable)
   - fumigacion_expiry (DATE, nullable)
   - pozo_tierra_expiry (DATE, nullable)
   - publicidad_expiry (DATE, nullable)

2. Crear √≠ndices para optimizar b√∫squedas:
   - idx_businesses_defensa_civil_expiry
   - idx_businesses_extintores_expiry
   - idx_businesses_fumigacion_expiry
   - idx_businesses_pozo_tierra_expiry
   - idx_businesses_publicidad_expiry

3. Agregar m√©todos al modelo Business:
   - getServicesStatus()
   - hasServiceIssues()
   - getExpiredServices()
   - getExpiringSoonServices()
   - Business.getWithServiceIssues()
   - Business.getExpiredServices()
   - Business.getServicesExpiringSoon()

Para ejecutar los cambios, usa: node migrate-services.js
  `);
  process.exit(0);
}

// Ejecutar migraci√≥n
runMigration();